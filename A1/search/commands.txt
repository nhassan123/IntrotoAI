python pacman.py

python pacman.py --layout testMaze --pacman GoWestAgent

python pacman.py --layout tinyMaze --pacman GoWestAgent

python pacman.py -h
python pacman.py -l tinyMaze -p SearchAgent -a fn=tinyMazeSearch

python pacman.py -l tinyMaze -p SearchAgent
python pacman.py -l mediumMaze -p SearchAgent

python pacman.py -l bigMaze -z .5 -p SearchAgent

python pacman.py -l mediumMaze -p SearchAgent -a fn=bfs

python pacman.py -l bigMaze -p SearchAgent -a fn=bfs -z .5

python eightpuzzle.py

python pacman.py -l mediumMaze -p SearchAgent -a fn=ucs

python pacman.py -l mediumDottedMaze -p StayEastSearchAgent

python pacman.py -l mediumScaryMaze -p StayWestSearchAgent

python pacman.py -l bigMaze -z .5 -p SearchAgent -a fn=astar,heuristic=manhattanHeuristic 

python pacman.py -l tinyCorners -p SearchAgent -a fn=bfs,prob=CornersProblem

python pacman.py -l mediumCorners -p SearchAgent -a fn=bfs,prob=CornersProblem

python pacman.py -l mediumCorners -p AStarCornersAgent -z 0.5

python pacman.py -l testSearch -p AStarFoodSearchAgent

python pacman.py -l trickySearch -p AStarFoodSearchAgent

python pacman.py -l bigSearch -p ClosestDotSearchAgent -z .5 

python pacman.py -l bigSearch -p ApproximateSearchAgent -z .5 -q 


    open = util.Queue()
    open.push((problem.getStartState(),[]))
    
    visited = []
    visited.append(problem.getStartState())
    
    while not open.isEmpty():
        
        state,actions = open.pop()
        
        '''if(problem.isGoalState(state)):
            return actions + [state]'''
            
        print "state:",state
        print "actions:", actions
        
        for succ in problem.getSuccessors(state):
            n = succ[0]
            n_dir = succ[1]
            
            if n not in visited:
                
                open.push((n, actions + [n_dir]))
                visited.append(n)
                
                if(problem.isGoalState(n)):
                    return actions + [n_dir]
                    
                #open.push((n, actions + [n_dir]))
                #visited.append(n)
            #print "Pushing ",n
        
    return False


        print "state:",state
        successors = []
        visitedCorners = state[1]
        #print visitedCorners
        x,y = state[0], state[1]
        #print x,y
        for action in [Directions.NORTH, Directions.SOUTH, Directions.EAST, Directions.WEST]:
            # Add a successor state to the successor list if the action is legal
            # Here's a code snippet for figuring out whether a new position hits a wall:
            
            dx, dy = Actions.directionToVector(action)
            nextx, nexty = int(x + dx), int(y + dy)
            next_Node = (nextx,nexty)
            #print "nextx:",nextx
            #print "nexty:",nexty
            hitsWall = self.walls[nextx][nexty]
            
            if not hitsWall:
                successorslist = list(visitedCorners)
                if next_Node in self.corners:
                    if next_Node not in successorslist:
                        successorslist.append(next_Node)
            
                successor = (next_Node,successorslist), action, 1)
                successors.append(successor)
            





part 5 working code!!



    def __init__(self, startingGameState):
        """
        Stores the walls, pacman's starting position and corners.
        """
        self.walls = startingGameState.getWalls()
        self.startingPosition = startingGameState.getPacmanPosition()
        top, right = self.walls.height-2, self.walls.width-2
        self.corners = ((1,1), (1,top), (right, 1), (right, top))
        for corner in self.corners:
            if not startingGameState.hasFood(*corner):
                print 'Warning: no food in corner ' + str(corner)
        self._expanded = 0 # DO NOT CHANGE; Number of search nodes expanded
        # Please add any code here which you would like to use
        # in initializing the problem
        self.Visitied = []
        self.CornersLeft = [self.corners[0],self.corners[1],self.corners[2],self.corners[3]]
        "*** YOUR CODE HERE ***"

    def getStartState(self):
        """
        Returns the start state (in your state space, not the full Pacman state
        space)
        """
        "*** YOUR CODE HERE ***"
        return (self.startingPosition, [])
        #util.raiseNotDefined()

    def isGoalState(self, state):
        """
        Returns whether this search state is a goal state of the problem.
        """
        "*** YOUR CODE HERE ***"
        #return (self.startingPosition, []
        
        pos = state[0]
        Visited_Corners = state[1]
        if pos in self.corners:
            if pos not in Visited_Corners:
                Visited_Corners.append(pos)
                print "visited:",Visited_Corners
            return len(Visited_Corners)==4
        else:
            return False
        
        #util.raiseNotDefined()

    def getSuccessors(self, state):
        """
        Returns successor states, the actions they require, and a cost of 1.

         As noted in search.py:
            For a given state, this should return a list of triples, (successor,
            action, stepCost), where 'successor' is a successor to the current
            state, 'action' is the action required to get there, and 'stepCost'
            is the incremental cost of expanding to that successor
        """
        x,y = state[0]
        Visited_Corners = state[1]
        successors = []
        for action in [Directions.NORTH, Directions.SOUTH, Directions.EAST, Directions.WEST]:
            # Add a successor state to the successor list if the action is legal
            # Here's a code snippet for figuring out whether a new position hits a wall:
            "*** YOUR CODE HERE ***"
            dx, dy = Actions.directionToVector(action)
            nextx, nexty = int(x + dx), int(y + dy)
            next_node = (nextx, nexty)
            hitsWall = self.walls[nextx][nexty]
            if not hitsWall:
                sucVCorners = list(Visited_Corners) 
                if next_node in self.corners:
                    if next_node not in sucVCorners:
                        sucVCorners.append( next_node )
                successor = ((next_node, sucVCorners), action, 1)
                successors.append(successor)

        self._expanded += 1 # DO NOT CHANGE
        return successors
